#!/usr/bin/env bash

set -eo pipefail

log() {
  logger -t drifter -s -- "$*"  > /dev/stderr
}

sshKey=~/.ssh/multipass.id_rsa

# TODO: change this to:
# - use cloud init to setup a user matching current username on the host
# - generate a dedicated SSH key
# - add it via cloud-init
# and stop copying the mulitpass key
drifter_ensure_ssh_key() {
  # If we don't have it - get the multipass ssh key, we will need sudo for that
  if [[ ! -e $sshKey  ]] ; then
    log "$sshKey not found, copying"
    sudo cp /var/root/Library/Application\ Support/multipassd/ssh-keys/id_rsa "$sshKey"
    sudo chown "$USER":staff "$sshKey"
  fi
}

drifter_launch_if_necessary() {
  local name=$1
  # Create the machine if not there already
  if [[ "$(multipass info --all --format json | jq -r ".info.$name")" == "null" ]] ;then
    log "creating $name"
    multipass launch \
              --cpus 4 \
              --mem 6G \
              --disk 20G \
              --name "$name" \
              18.04
  fi

}

drifter_command_start() {
  local name=$1
  drifter_launch_if_necessary "$name"
  if [[ "$(multipass info "$name" --format json | jq -r ".info.$name.state")" != "Running" ]] ; then
    log "starting $name"
    multipass start "$name"
  else
    log "$name already started"
  fi
}

drifter_command_stop() {
  local name=$1
  log "stopping $name"
  multipass stop "$name"
  exit 0
}

drifter_suspend() {
  local name=$1
  log "suspending $name"
  multipass suspend "$name"
  exit 0
}

drifter_command_provision() {
  local name=$1
  local provisionScript=$2
  log "provisioning $name with $provisionScript"
  multipass transfer "$provisionScript" "$name":/tmp/provision.sh
  multipass exec "$name" -- sudo bash /tmp/provision.sh
  exit 0
}

drifter_command_shell() {
  local name=$1
  log "starting $name shell"
  multipass shell "$name"
  exit 0
}

# TODO: configurable tunnels!
drifter_command_tunnels() {
  local name=$1
  local ip=$2
  log "starting $name tunnels (ip: $ip)"
  ssh "ubuntu@$ip" \
      -i "$sshKey" \
      -A \
      -L 3000:localhost:3000 \
      -L 3001:localhost:3001 \
      -L 3005:localhost:3005 \
      -L 3034:localhost:3034 \
      -L 8025:localhost:8025 \
      -L 9100:localhost:9100 \
      -L 9630:localhost:9630 \
      -L 9989:localhost:9989 \
      -L 9750:localhost:9750

}

drifter_command_ssh() {
  local name=$1
  local ip=$2
  log "sshing to $name (ip: $ip)"
  ssh "ubuntu@$ip" -i "$sshKey" -A
}


drifter_command_ip() {
  local name=$1
  log "finding ip for $name"
  ip=$(multipass info "$name" --format json | jq -r ".info.$name.ipv4[0]")
  log "$name -> $ip"
  echo "$ip"
}

drifter_help() {
  # Parses out all lines starting with ## to generate docs
  grep '##' "$0" | grep -v grep | sed 's/## //g'
  ## üßîüèª Drifter, a small vagrant, powered by multipass
  ## All commands require the name of the VM to be passed e.g.
  ## # drifter -n dev -c ssh
  ## # drifter -n wrk -c tunnels
  ## Version=0.0.1
  ## or
  ## # drifter -c provision -n dev -p ./my/vm.sh
  ## Args:
  ## -n name of the vm (one of: dev, wrk)
  ## -c command
  ## -p if command is provision, path to the bash script to run in the machine

  ## Commands:
}

# Entry point
drifter_main() {
  local name=$1
  local command=$2
  local provisionScript=$3

  if [[ "$name" == "-h" || "$name" == "--help" || "$name" == "help" ]] ; then
    drifter_help
    exit 0
  fi


  # validate name
  if [[ "$name" == "" ]] ; then
    log "Need a name! Only 'dev' and 'wrk' are supported atm."
    multipass list
    exit 1
  fi

  if [[ "$name" == "wrk" || "$name" == "dev" ]] ; then
    log "$name ok"
  else
    log "Unknown machine name: $name, accepted: 'dev' and 'wrk'"
    exit 1
  fi

  drifter_ensure_ssh_key

  case $command in
    start)
      drifter_launch_if_necessary "$name"
      drifter_command_start "$name"
      ;;
    suspend) ## Suspend the VM. Unsupported right now
      drifter_command_suspend "$name"
      ;;
    stop) ## Stop the VM
      drifter_command_stop "$name"
      ;;
    provision) ## Provision the VM with given Bash script
      drifter_command_provision "$name" "$provisionScript"
      ;;
    tunnels) ## Start a SSH session with multiple ports opened
      drifter_command_tunnels "$name" "$(drifter_command_ip "$name")"
      ;;
    shell) ## Start a shell, no agent or tunnels opened
      drifter_command_shell "$name"
      ;;
    ssh) ## Start a SSH session with SSH agent forwarded
      drifter_command_ssh "$name" "$(drifter_command_ip "$name")"
      ;;
    ip) ## Find the IP of the VM
      drifter_command_ip "$name"

      ;;
    *)
      drifter_help
      exit 1
      ;;
    esac
}

# Entrypoint
name=
command=
provisionScript=

while getopts "n:c:hp:" OPTIONS; do
  case "$OPTIONS" in
    h)
      drifter_help
      exit 0
      ;;
    n)
      name="$OPTARG"
      ;;
    c)
      command="$OPTARG"
      ;;
    p)
      provisionScript="$OPTARG"
      ;;
    *)
      drifter_help
      exit 0
      ;;
  esac
done

if [[ "$name" == ""  ]] || [[ "$command" == "" ]] ; then
  echo "missing name (given: $name) or command (given: $command)"
  exit 1
fi

drifter_main "$name" "$command" "$provisionScript"
